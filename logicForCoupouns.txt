// src/components/CartPage.tsx
import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState } from '../store/store';
import { clearCart } from '../store/cartSlice';

interface Coupon {
  code: string;
  discountPercentage: number;
  minAmount: number;
}

const CartPage: React.FC = () => {
  const [coupons, setCoupons] = useState<Coupon[]>([]);
  const [appliedCoupon, setAppliedCoupon] = useState<string | null>(null);
  const [discount, setDiscount] = useState<number>(0);
  const cart = useSelector((state: RootState) => state.cart);
  const dispatch = useDispatch();

  useEffect(() => {
    // Load the coupon data from the JSON file
    fetch('/coupons.json')
      .then(response => response.json())
      .then(data => setCoupons(data));
  }, []);

  const calculateTotalAmount = () => {
    return cart.items.reduce((total, item) => total + item.price * item.quantity, 0);
  };

  const handleApplyCoupon = () => {
    if (!appliedCoupon) return;

    const coupon = coupons.find(c => c.code === appliedCoupon);

    if (coupon) {
      const totalAmount = calculateTotalAmount();
      if (totalAmount >= coupon.minAmount) {
        const discountAmount = (totalAmount * coupon.discountPercentage) / 100;
        setDiscount(discountAmount);
      } else {
        alert(`This coupon requires a minimum purchase of $${coupon.minAmount}`);
      }
    } else {
      alert('Invalid coupon code');
    }
  };

  const handlePlaceOrder = () => {
    // Implement the logic for placing the order
    alert('Order placed successfully');
    dispatch(clearCart());
  };

  const totalAmount = calculateTotalAmount();
  const finalAmount = totalAmount - discount;

  return (
    <div>
      <h2>Cart</h2>
      <ul>
        {cart.items.map(item => (
          <li key={item.id}>
            {item.name} - ${item.price} x {item.quantity}
          </li>
        ))}
      </ul>
      <div>
        <p>Total Amount: ${totalAmount.toFixed(2)}</p>
        <p>Discount: ${discount.toFixed(2)}</p>
        <p>Final Amount: ${finalAmount.toFixed(2)}</p>
      </div>
      <div>
        <input
          type="text"
          placeholder="Enter coupon code"
          value={appliedCoupon || ''}
          onChange={e => setAppliedCoupon(e.target.value.toUpperCase())}
        />
        <button onClick={handleApplyCoupon}>Apply Coupon</button>
      </div>
      <button onClick={handlePlaceOrder}>Place Order</button>
    </div>
  );
};

export default CartPage;
